
#include <vector>
#include <algorithm>
#include <set>

using namespace std;

/*
 * A power set is a combination of all possible subsets for a given set.
 * This algorithm ensures a proper power set is generated by ensuring that no
 * subset is duplicated. Duplicates are removed by first sorting the set and
 * making sure to skip any element that is duplicated before backtracking.
 * This algorithm follows a standard backtracking approach and serves as a
 * good template for similar algorithms.
 */
void powerSetHelper(vector<vector<int>>& subsets,
                    vector<int>& currentSubset,
                    vector<int>& nums,
                    int index) {
    subsets.push_back(currentSubset);

    for (int i = index; i < nums.size(); i++) {
        // avoid duplicates and make sure we stay in bounds
        if (i != index && nums[i] == nums[i-1]) {
            continue;
        }
        // Common backtracking template 
        // Try a partial candidate solution by adding it and explorint further
        currentSubset.push_back(nums[i]);
        powerSetHelper(subsets, currentSubset, nums, i+1);
        // Now we backtrack by removing candidate that we previously explored
        currentSubset.pop_back();
    }
}
vector<vector<int>> powerSet(vector<int>& nums) {
    vector<vector<int>> subsets;
    vector<int> currentSubset;;
    sort(nums.begin(), nums.end());
    powerSetHelper(subsets, currentSubset, nums, 0);
    return subsets;
}

int main(int argc, char **argv) {

    vector<int> data{1, 2, 3};
    vector<vector<int>> result = powerSet(data);

    vector<vector<int>> expectedResult = {
        {},
        {1},
        {1, 2},
        {1, 2, 3},
        {1, 3},
        {2},
        {2, 3},
        {3}
    };

    assert(result.size() == expectedResult.size());

    for (int i = 0; i < result.size(); i++) {
        assert(result[i].size() == expectedResult[i].size());
        for (int j = 0; j < result[i].size(); j++) {
            assert(result[i][j] == expectedResult[i][j]);
        }
    }

    return 0;
}
